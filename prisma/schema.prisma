// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum PostType {
  painting
  sculpture
}

enum TradeStatus {
  pending
  accepted
  rejected
}

enum PreferenceType {
  painting
  sculpture
  none
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  onboardingComplete Boolean? @default(false)
  isSeller		   Boolean?  @default(false)
  accounts         Account[]
  // requests         Booking[]   @relation("requests")
  // incomingRequests Booking[]   @relation("incoming")
  sessions         Session[]
  // Post             Post[]
  Post               Post[]
}

// model Booking {
//   id          String @id @default(cuid())
//   // Relations
//   to          User   @relation("incoming", fields: [authorId], references: [id])
//   authorId    String
//   from        User   @relation(name: "requests", fields: [requesterId], references: [id])
//   requesterId String

<<<<<<< HEAD
//   postInQuestion Post @relation(fields: [postId], references: [id])
=======
>>>>>>> 40af90955052fb6df450aa6a92a66e2ec8d7e3be

//   postId String

//   startTime DateTime

//   endTime DateTime
//   // postInQuestion Post        @relation(fields: [postId], references: [id])
//   // postId         String
// }

model Post {
  id       String @id @default(cuid())
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  location     String
  kW           Int
  indoor       Boolean
  pricePerHour String
  teslaOnly    Boolean
  selfCheckIn  Boolean
  description  String
  Address      String
  // status         TradeStatus
  imageUrls    String?
<<<<<<< HEAD
  // Booking      Booking[]
=======
>>>>>>> 40af90955052fb6df450aa6a92a66e2ec8d7e3be
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Post {
//   // General attributes
//   id             String         @id @default(cuid())
//   title          String
//   description    String
//   imageUrl       String
//   category       PostType
//   preferredTrade PreferenceType

//   // Relations
//   author   User   @relation(fields: [authorId], references: [id])
//   authorId String

//   // Timestamps
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   Trade     Trade[]
// }
