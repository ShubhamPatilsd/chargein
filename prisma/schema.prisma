generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  emailVerified      DateTime?
  image              String?
  onboardingComplete Boolean?  @default(false)
  isSeller           Boolean?  @default(false)
  accounts           Account[]
  incomingRequests   Booking[] @relation("incoming")
  requests           Booking[] @relation("requests")
  Post               Post[]
  sessions           Session[]
}

model Booking {
  id             String   @id @default(cuid())
  authorId       String
  requesterId    String
  postId         String
  startTime      DateTime
  endTime        DateTime
  to             User     @relation("incoming", fields: [authorId], references: [id])
  postInQuestion Post     @relation(fields: [postId], references: [id])
  from           User     @relation("requests", fields: [requesterId], references: [id])
readByRenter Boolean @default(false)
}

model Post {
  id           String    @id @default(cuid())
  authorId     String
  location     String
  kW           Int
  indoor       Boolean
  pricePerHour String
  teslaOnly    Boolean
  selfCheckIn  Boolean
  description  String
  Address      String
  imageUrls    String?
  Booking      Booking[]
  author       User      @relation(fields: [authorId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostType {
  painting
  sculpture
}

enum TradeStatus {
  pending
  accepted
  rejected
}

enum PreferenceType {
  painting
  sculpture
  none
}
